package com.example.tianjun.projecttest.SQLite.Custom_serviceInfo;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOM_SERVICE_INFO".
*/
public class Custom_serviceInfoDao extends AbstractDao<Custom_serviceInfo, Long> {

    public static final String TABLENAME = "CUSTOM_SERVICE_INFO";

    /**
     * Properties of entity Custom_serviceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Msg_id = new Property(1, String.class, "msg_id", false, "MSG_ID");
        public final static Property Msg_content = new Property(2, String.class, "msg_content", false, "MSG_CONTENT");
        public final static Property Msg_time = new Property(3, String.class, "msg_time", false, "MSG_TIME");
        public final static Property User_name = new Property(4, String.class, "user_name", false, "USER_NAME");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");
    }


    public Custom_serviceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public Custom_serviceInfoDao(DaoConfig config, Custom_serviceInfoDaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOM_SERVICE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MSG_ID\" TEXT," + // 1: msg_id
                "\"MSG_CONTENT\" TEXT," + // 2: msg_content
                "\"MSG_TIME\" TEXT," + // 3: msg_time
                "\"USER_NAME\" TEXT," + // 4: user_name
                "\"AVATAR\" TEXT);"); // 5: avatar
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOM_SERVICE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Custom_serviceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msg_id = entity.getMsg_id();
        if (msg_id != null) {
            stmt.bindString(2, msg_id);
        }
 
        String msg_content = entity.getMsg_content();
        if (msg_content != null) {
            stmt.bindString(3, msg_content);
        }
 
        String msg_time = entity.getMsg_time();
        if (msg_time != null) {
            stmt.bindString(4, msg_time);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(5, user_name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Custom_serviceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msg_id = entity.getMsg_id();
        if (msg_id != null) {
            stmt.bindString(2, msg_id);
        }
 
        String msg_content = entity.getMsg_content();
        if (msg_content != null) {
            stmt.bindString(3, msg_content);
        }
 
        String msg_time = entity.getMsg_time();
        if (msg_time != null) {
            stmt.bindString(4, msg_time);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(5, user_name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Custom_serviceInfo readEntity(Cursor cursor, int offset) {
        Custom_serviceInfo entity = new Custom_serviceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msg_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // msg_content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msg_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // avatar
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Custom_serviceInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsg_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsg_content(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMsg_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Custom_serviceInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Custom_serviceInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Custom_serviceInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
